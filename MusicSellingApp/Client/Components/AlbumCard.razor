@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject HttpClient client
@inject IJSRuntime Js
@using Blazor.Fluxor
@inject IDispatcher Dispatcher
@using Stripe.Checkout

@if (Album != null)
{

    <BSCard CardType="CardType.Card">

        <BSCard CardType="CardType.Image" VerticalAlignment="VerticalAlignment.Top" src="@Album.Cover" alt="Card image cap" />

        <BSCard CardType="CardType.Body">
            <BSCard CardType="CardType.Title">Album Name : @Album.AlbumName</BSCard>

            <BSCard CardType="CardType.Subtitle">Genre @Album.Genre</BSCard>

            <BSCard CardType="CardType.Text">Album Description @Album.Description</BSCard>

            @if (User.GetType().Name == "Artist")
            {
                <BSButton @onclick="() => OnDelete.InvokeAsync(Album.Id)">Delete</BSButton>
                <BSButton @onclick="@(() => GoToEditAlbumForm(Album.Id))">Update</BSButton>
            }
            else
            {
                <BSCard CardType="CardType.Text">Artist : @Album.Artist.Name</BSCard>
                <div class="container">
                    <input type="button" @onclick="@Decrement" class="btn btn-danger btn-number" value="-" />
                    <input type="text" value="@quantity" name="quantity" maxlength="2" max="10" size="1" id="number" />
                    <input type="button" @onclick="@Increment" class="btn btn-success btn-number" value="+" />
                </div>
                <BSButton @onclick="AddToCart">Add to cart</BSButton>
        <BSButton @onclick="@(e => CheckoutHandler(Album.Id,Album.AlbumName,Album.Description,Album.Price))">Buy Album</BSButton>
            }

        </BSCard>
    </BSCard>

}


@code {
    [Parameter] public  Album Album { get; set; }
    [Parameter] public EventCallback<long> OnDelete { get; set; }
    [Parameter] public User User { get; set; }

    public static int quantity = 1;

    public static async Task<string> CreateCheckoutSessionAsync(string albumName,string albumDescription,double albumPrice, string customerId = null)
    {
        Stripe.StripeConfiguration.ApiKey = "sk_test_51HakXCLFPzNgSBSAsmCE2RO37Zo89BoOkSEZgleUHByO1uXIk7bINT13OB8csqNMkoNwAXVyPwt5DqdDPH3EUaQl00tMImYyfH"; //Get it from your stripe dashboard
        var options = new SessionCreateOptions
        {
            PaymentMethodTypes = new List<string>
                {
                    "card"
                },
            LineItems = new List<SessionLineItemOptions>
                {
                    new SessionLineItemOptions
                    {
                        Name = albumName,
                        Description = albumDescription,
                        Amount = Convert.ToInt32(albumPrice*100),
                        Currency = "USD",
                        Quantity = quantity
                    }
                },
            SuccessUrl = "https://localhost:44368/fanLibrary?session_id={CHECKOUT_SESSION_ID}",
            CancelUrl = "https://localhost:44368/failed"
        };

        return (await new SessionService().CreateAsync(options)).Id;
    }

    private async Task CheckoutHandler(long id,string albumName, string albumDescription,double price)
    {
        string sessionId = await CreateCheckoutSessionAsync(Album.AlbumName,Album.Description,price);


        if (User.GetType().Name == "Fan")
        {

            Fan fan = (Fan)User;
            Fan fullFan = await client.GetFromJsonAsync<Fan>($"api/Fans/{fan.Id}");
            FanAlbums fanAlbum = new FanAlbums() {
                FanId = fullFan.Id,
                AlbumId = Album.Id
            };

            await client.PostAsJsonAsync<FanAlbums>($"/api/FanAlbums", fanAlbum);

        }
        await Js.InvokeVoidAsync("redirectToCheckout", sessionId);
        await localStorage.SetItemAsync<string>("boughtAlbum",albumName);

    }

    public async Task AddToCart()
    {
        if (User.GetType().Name == "Fan")
        {

            Fan fan = (Fan)User;
            Order order = new Order(Album, quantity);
            List<Order> orders = new List<Order>();
            orders.Add(order);
            Cart cart = new Cart();
            cart.Fan = fan;
            await client.PostAsJsonAsync<Cart>("api/Carts", cart);

        }
    }

    public void Increment()
    {
        quantity++;
    }

    public void Decrement()
    {
        quantity--;
    }

    public void GoToEditAlbumForm(long albumId)
    {
        navigationManager.NavigateTo($"/albums/edit/{albumId}");
    }
    }
