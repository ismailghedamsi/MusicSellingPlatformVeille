@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject HttpClient client
@inject IJSRuntime Js
@if (Album != null)
{

    <BSCard CardType="CardType.Card">

        <BSCard CardType="CardType.Image" VerticalAlignment="VerticalAlignment.Top" src="@Album.Cover" alt="Card image cap" />

        <BSCard CardType="CardType.Body">
            <BSCard CardType="CardType.Title">Album Name : @Album.AlbumName</BSCard>

            <BSCard CardType="CardType.Subtitle">Genre @Album.Genre</BSCard>

            <BSCard CardType="CardType.Text">Album Description @Album.Description</BSCard>

            @if (User.GetType().Name == "Artist")
            {
                <BSButton @onclick="() => OnDelete.InvokeAsync(Album.Id)">Delete</BSButton>
                <BSButton @onclick="@(() => GoToEditAlbumForm(Album.Id))">Update</BSButton>
            }
            else
            {
                <BSCard CardType="CardType.Text">Artist : @Album.Artist.Name</BSCard>
                <div class="container">
                    <input type="button" @onclick="@Decrement" class="btn btn-danger btn-number" value="-" />
                    <input type="text" value="@quantity" name="quantity" maxlength="2" max="10" size="1" id="number" />
                    <input type="button" @onclick="@Increment" class="btn btn-success btn-number" value="+" />
                </div>
                <BSButton @onclick="AddToCart">Add to cart</BSButton>

            }

        </BSCard>

    </BSCard>

}


@code {
    [Parameter] public Album Album { get; set; }
    [Parameter] public EventCallback<long> OnDelete { get; set; }
    [Parameter] public User User { get; set; }



    public int quantity = 1;
    public  async Task AddToCart()
    {
        if (User.GetType().Name == "Fan")
        {

            Fan fan = (Fan)User;
            Order order = new Order(Album, quantity);
            Console.WriteLine("Quantity" + order.Quantity);
            List<Order> orders = new List<Order>();
            orders.Add(order);
            //Cart cart = new Cart(fan,orders); 
            Cart cart = new Cart();
            cart.Fan = fan;
            //fan.Cart = cart;
            //await client.PutAsJsonAsync<Fan>($"/api/Fans/{fan.Id}", fan);
            await client.PostAsJsonAsync<Cart>("api/Carts",cart);

        }
    }

    public void Increment()
    {
        quantity++;
    }

    public void Decrement()
    {
        quantity--;
    }

    public void GoToEditAlbumForm(long albumId)
    {
        navigationManager.NavigateTo($"/albums/edit/{albumId}");
    }
}
