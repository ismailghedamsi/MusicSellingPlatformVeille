@using System.Net.Http
@inject HttpClient httpClient
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject ILocalStorageService storageService
@inject IJSRuntime JSRuntime

<EditForm Model="@credential" OnValidSubmit="@Authenticate">
    <div class="form-group">
        <label>Username  : </label>
        <InputText @bind-Value="credential.username" />
    </div>

    <div class="form-group">
        <label>Password  : </label>
        <InputText type="password" @bind-Value="credential.password" />
    </div>

    <div class="form-group">
        <label>User type : </label>
        <InputSelect class="form-control inputstl" @bind-Value="userType">
            <option value="Artist">Artist</option>
            <option value="Fan">Fan</option>
            <option value="Admin">Admin</option>
        </InputSelect>
    </div>
    <button class="btn btn-primary">Login </button>
</EditForm>
@if (loginError)
{
    <div>Wrong username or password</div>
}
@code {
    Credential credential = new Credential();
    string descriminator = "";
    bool loginError = false;
    string userType = "";
    List<Artist> artists = new List<Artist>();
    public async Task Authenticate()
    {
        await storageService.RemoveItemAsync("loggedUser");

        if (userType == "Artist")
        {
            artists = await httpClient.GetFromJsonAsync<List<Artist>>("api/Artists");

            Artist artist = artists.Where(artist => artist.Username == credential.username && artist.Password == credential.password).FirstOrDefault();

            if (artist == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Artist username or password invalid");
            } else if (artist.IsActive == false)
            {
                await JSRuntime.InvokeVoidAsync("alert", "You are banned for the website");
            }
            else
            {
                await storageService.SetItemAsync<Artist>("loggedUser", artist);
                NavigationManager.NavigateTo("ArtistAlbums", true);
            }

        }
        else if (userType == "Fan")
        {
            List<Fan> fans = await httpClient.GetFromJsonAsync<List<Fan>>("api/Fans");
            Fan fan = fans.Where(artist => artist.Username == credential.username && artist.Password == credential.password).FirstOrDefault();
            if (fan == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Fan username or password invalid");
            }else if (!fan.IsActive)
            {
                await JSRuntime.InvokeVoidAsync("alert", "You are banned for the website");
            }
            else
            {

                await storageService.SetItemAsync<Fan>("loggedUser", fan);
                NavigationManager.NavigateTo("MusicCatalog", true);
            }
        }
        else
        {
            List<Admin> admins = await httpClient.GetFromJsonAsync<List<Admin>>("api/Admins");
            Admin admin = admins.Where(a => a.Username == credential.username && a.Password == credential.password).FirstOrDefault();
            if (admin == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Admin username or password invalid");
            }
            else
            {

                await storageService.SetItemAsync<Admin>("loggedUser", admin);
                NavigationManager.NavigateTo("adminPage", true);
            }
        }
    }
}
}
