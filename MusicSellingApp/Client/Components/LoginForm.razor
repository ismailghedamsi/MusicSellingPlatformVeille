@using System.Net.Http
@inject HttpClient httpClient
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject ILocalStorageService storageService
<h3>RegistrationForm</h3>


<EditForm Model="@credential" OnValidSubmit="@Authenticate">
    <div class="form-group">
        <label>Username  : </label>
        <InputText @bind-Value="credential.username" />
    </div>

    <div class="form-group">
        <label>Password  : </label>
        <InputText @bind-Value="credential.password" />
    </div>

    <div class="form-group">
        <label>User type : </label>
        <InputSelect class="form-control inputstl" @bind-Value="userType">
                <option value="Artist">Artist</option>
                <option value="Fan">Fan</option>
        </InputSelect>
    </div>


    <button class="btn btn-primary">Register </button>



</EditForm>
@if (loginError)
{
    <div>Wrong username or password</div>
}
@code {
    Credential credential = new Credential();
    string descriminator = "";
    bool loginError = false;
    string userType = "";
    List<Artist> artists = new List<Artist>();
    public async Task Authenticate()
    {
        await storageService.RemoveItemAsync("loggedUser");

        if (userType == "Artist")
        {
            artists = await httpClient.GetFromJsonAsync<List<Artist>>("api/Artists");
            if(artists != null)
            {
                var temp = artists.Where(artist => artist.Username == credential.username && artist.Password == credential.password);
                Console.WriteLine(temp);
                if (temp != null && temp.Count() != 0)
                {
                    Artist artist = artists.Where(artist => artist.Username == credential.username && artist.Password == credential.password).First();
                    if (artist != null)
                    {
                        await storageService.SetItemAsync<Artist>("loggedUser", artist);
                    }
                }

                NavigationManager.NavigateTo("ArtistAlbums");
            }

        }
        else
        {
            List<Fan> fans = await httpClient.GetFromJsonAsync<List<Fan>>("api/Fans");
            Fan fan = fans.Where(artist => artist.Username == credential.username && artist.Password == credential.password).First();
            await storageService.SetItemAsync<Fan>("loggedUser", fan);
            NavigationManager.NavigateTo("counter");
        }

    }


    }


}
