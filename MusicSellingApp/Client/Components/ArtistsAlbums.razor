@inject HttpClient client
@inject ILocalStorageService storageService
@inject NavigationManager navigationManager

<h3>ArtistsAlbums</h3>

<div class="container">

    <EditForm Model="@Album" OnValidSubmit="@AddAlbum">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Album Name  : </label>
            <InputText class="form-control inputstl" @bind-Value="Album.AlbumName" />
        </div>

        <div class="form-group">
            <label>Genre : </label>
            <InputSelect class="form-control inputstl" @bind-Value="Album.Genre">
                @foreach (var genre in Enum.GetValues(typeof(Genre)))
                {
                    <option value="@genre">@genre</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>Description  : </label>
            <InputTextArea class="form-control inputstl" @bind-Value="Album.Description" />
        </div>

        <div class="form-group">
            <label>Price  : </label>
            <InputNumber class="form-control inputstl" @bind-Value="Album.Price" />
        </div>

        <div class="form-group">
            <label>Release Date  : </label>
            <InputDate class="form-control inputstl" @bind-Value="Album.ReleaseDate" />
        </div>

        <div class="form-group">
            <label>Album Cover Link  : </label>
            <InputText class="form-control inputstl" @bind-Value="Album.Cover" />
        </div>


        <div class="form-group">
            <button class="btn btn-primary" type="submit">Add Album </button>
        </div>
    </EditForm>
</div>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        @foreach (Album album in albums)
        {
            <div class="mat-layout-grid-cell">
                <AlbumCard Album="@album" OnDelete="DeleteAlbum"  />
            </div>

        }
        </div>
    </div>

    @if (albums == null || albums.Count == 0)
    {
        <h1 style="color : yellow">You have  no albums please add albums</h1>
    }





    @code {


        Artist artist;
        long artistId;
        public List<Album> albums = new List<Album>();

        public Album Album { get; set; } = new Album();
        string artistName = "";

        protected override async Task OnInitializedAsync()
        {
            artist = await storageService.GetItemAsync<Artist>("loggedUser");
            if (artist != null)
            {

                artistId = artist.Id;
                albums = await client.GetFromJsonAsync<List<Album>>($"api/Albums/{artistId}");
            }
        }



        public async Task AddAlbum()
        {
            if (artist != null)
            {
                artist.Discography.Add(Album);
                await client.PutAsJsonAsync<Album>($"/api/Artists/{artist.Id}", Album);
                StateHasChanged();
                artist = await storageService.GetItemAsync<Artist>("loggedUser");
                if (artist != null)
                {

                    artistId = artist.Id;
                    albums = await client.GetFromJsonAsync<List<Album>>($"api/Albums/{artistId}");
                }

            }
        }

        public void UpdateAlbum(long id)
        {
            //await client.PutAsJsonAsync<Album>($"api/Albums/{artistId}",Album);
       
        }

        public async Task DeleteAlbum(long id)
        {
            Console.WriteLine(id);
            await client.DeleteAsync($"api/Albums/{id}");
            albums = await client.GetFromJsonAsync<List<Album>>($"api/Albums/{artistId}");
        }


    }

    <style>
        h3 {
            color: yellow;
        }

        body {
            background-color: yellow;
        }



        img {
            width: 250px;
            height: 250px;
        }
    </style>
