
@inject HttpClient client
@inject ILocalStorageService storageService
@inject NavigationManager navigationManager
@using BlazorInputFile
@using System.IO
<h3>ArtistsAlbums</h3>

<div class="container">

    <EditForm Model="@Album" OnValidSubmit="@AddAlbum">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Album Name  : </label>
            <InputText class="form-control inputstl" @bind-Value="Album.AlbumName" />
        </div>

        <div class="form-group">
            <label>Genre : </label>
            <InputSelect class="form-control inputstl" @bind-Value="Album.Genre">
                @foreach (var genre in Enum.GetValues(typeof(Genre)))
                {
                    <option value="@genre">@genre</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label>Description  : </label>
            <InputTextArea class="form-control inputstl" @bind-Value="Album.Description" />
        </div>

        <div class="form-group">
            <label>Price  : </label>
            <InputNumber class="form-control inputstl" @bind-Value="Album.Price" />
        </div>

        <div class="form-group">
            <label>Release Date  : </label>
            <InputDate class="form-control inputstl" @bind-Value="Album.ReleaseDate" />
        </div>

        <div class="form-group">
            <label>Album Cover Link  : </label>
            <InputText class="form-control inputstl" @bind-Value="Album.Cover" />
        </div>

        <div class="form-group">
            <label>Upload file </label>
            <InputFile OnChange="HandleSelection">

            </InputFile>
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">Add Album </button>
        </div>
    </EditForm>
</div>

<div class="mat-layout-grid">
    @if (shouldShowWaitingMessage)
    {
        <h1>Albums are being loaded</h1>
    }

    @if (shouldDisplayNoAlbumMessage)
    {

        <h1 style="color : yellow">You have  no albums please add albums</h1>
    }
    else
    {
        <div class="mat-layout-grid-inner">
            @foreach (Album album in albums)
            {
                <div class="mat-layout-grid-cell">
                    <AlbumCard User="@artist" Album="@album" OnDelete="DeleteAlbum" />
                </div>

            }
        </div>
    }

</div>





@code {
    bool shouldDisplayNoAlbumMessage = false;
    bool shouldShowWaitingMessage = true;
    Artist artist;
    long artistId;
    public List<Album> albums = new List<Album>();

    public Album Album { get; set; } = new Album();
    string artistName = "";

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            var content = new MultipartFormDataContent {
                { new ByteArrayContent(ms.GetBuffer()), "\"upload\"", file.Name }
            };
            await client.PostAsync("upload", content);
        }
    }


    protected override async Task OnInitializedAsync()
    {

        shouldShowWaitingMessage = true;
        artist = await storageService.GetItemAsync<Artist>("loggedUser");
        shouldShowWaitingMessage = false;
        if (artist != null)
        {

            artistId = artist.Id;
            albums = await client.GetFromJsonAsync<List<Album>>($"api/Albums/{artistId}");
        }
        else
        {
            shouldDisplayNoAlbumMessage = true;
        }
    }



    public async Task AddAlbum()
    {
        if (artist != null)
        {
            artist.Discography.Add(Album);
            await client.PutAsJsonAsync<Album>($"/api/Artists/{artist.Id}", Album);
            StateHasChanged();
            artist = await storageService.GetItemAsync<Artist>("loggedUser");
            if (artist != null)
            {

                artistId = artist.Id;
                albums = await client.GetFromJsonAsync<List<Album>>($"api/Albums/{artistId}");
            }

        }
    }

    public void UpdateAlbum(long id)
    {
        //await client.PutAsJsonAsync<Album>($"api/Albums/{artistId}",Album);

    }

    public async Task DeleteAlbum(long id)
    {
        await client.DeleteAsync($"api/Albums/{id}");
        albums = await client.GetFromJsonAsync<List<Album>>($"api/Albums/{artistId}");
    }


}

<style>
    h3 {
        color: yellow;
    }

    body {
        background-color: yellow;
    }



    img {
        width: 250px;
        height: 250px;
    }
</style>
